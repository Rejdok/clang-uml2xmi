#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –Ω–µ–π–º—Å–ø–µ–π—Å—ã
"""

import json
from build.cpp.builder import CppModelBuilder
from gen.xmi.generator import XmiGenerator
import tempfile
import os

def test_stubs_in_namespaces():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–µ–π–º—Å–ø–µ–π—Å—ã"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–π–º—Å–ø–µ–π—Å–∞–º–∏
    test_data = {
        "elements": [
            {
                "id": "class_1",
                "name": "MyClass",
                "qualified_name": "mynamespace::MyClass",
                "type": "class",
                "display_name": "MyClass",
                "is_abstract": False,
                "members": [
                    {
                        "name": "data",
                        "type": "std::vector<int>",
                        "visibility": "private",
                        "is_static": False
                    }
                ],
                "operations": []
            }
        ]
    }
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    builder = CppModelBuilder(test_data)
    build_result = builder.build()
    
    # –°–æ–∑–¥–∞–µ–º UmlModel –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    from core.uml_model import UmlModel
    
    # CppModelBuilder –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç created –∫–∞–∫ ElementName -> UmlElement
    # –ù–æ UmlModel –æ–∂–∏–¥–∞–µ—Ç elements –∫–∞–∫ XmiId -> UmlElement
    # –ù—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
    elements_by_xmi = {}
    for name, element in build_result["created"].items():
        elements_by_xmi[element.xmi] = element
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π–º—Å–ø–µ–π—Å–∞—Ö
    namespace_packages = build_result.get("namespace_packages", {})
    print(f"üîç –°–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–µ–π–º—Å–ø–µ–π—Å—ã: {namespace_packages}")
    
    model = UmlModel(
        elements=elements_by_xmi,
        associations=build_result["associations"],
        dependencies=build_result["dependencies"],
        generalizations=build_result.get("generalizations", []),
        name_to_xmi=build_result["name_to_xmi"],
        namespace_packages=namespace_packages  # NEW: –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π–º—Å–ø–µ–π—Å–∞—Ö
    )
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞:")
    print(f"   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(model.elements)}")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
    for xmi_id, element in model.elements.items():
        print(f"   - {xmi_id}: {element.name} (—Ç–∏–ø: {type(element.name)})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å MyClass —Å–æ–∑–¥–∞–Ω
    myclass_element = None
    for xmi_id, element in model.elements.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏
        element_name_str = str(element.name)
        if (element_name_str == "mynamespace::MyClass" or 
            element_name_str == "MyClass" or
            "MyClass" in element_name_str):
            myclass_element = element
            break
    
    if myclass_element:
        print(f"‚úÖ –ö–ª–∞—Å—Å MyClass –Ω–∞–π–¥–µ–Ω: {myclass_element.xmi}")
        print(f"   - –ò–º—è: {myclass_element.name}")
        print(f"   - –ß–ª–µ–Ω–æ–≤: {len(myclass_element.members)}")
        if myclass_element.members:
            print(f"   - –ü–µ—Ä–≤—ã–π —á–ª–µ–Ω: {myclass_element.members[0].name} —Ç–∏–ø–∞ {myclass_element.members[0].type_repr}")
    else:
        print("‚ùå –ö–ª–∞—Å—Å MyClass –ù–ï –Ω–∞–π–¥–µ–Ω")
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º name_to_xmi:")
        for name, xmi_id in build_result["name_to_xmi"].items():
            print(f"   - {name} -> {xmi_id}")
        assert False, "–ö–ª–∞—Å—Å MyClass –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XMI...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XMI
    generator = XmiGenerator(model)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.xmi', delete=False) as tmp:
        tmp_path = tmp.name
    
    try:
        generator.write(tmp_path, "TestProject")
        
        print("‚úÖ XMI —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        
        # –ß–∏—Ç–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º XMI
        with open(tmp_path, 'r', encoding='utf-8') as f:
            xmi_content = f.read()
        
        print(f"üìÑ –†–∞–∑–º–µ—Ä XMI —Ñ–∞–π–ª–∞: {len(xmi_content)} –±–∞–π—Ç")
        print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ XMI:")
        print(xmi_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–∫–µ—Ç–æ–≤
        if 'uml:Package' in xmi_content:
            print("‚úÖ –ü–∞–∫–µ—Ç—ã (–Ω–µ–π–º—Å–ø–µ–π—Å—ã) –Ω–∞–π–¥–µ–Ω—ã –≤ XMI")
        else:
            print("‚ùå –ü–∞–∫–µ—Ç—ã (–Ω–µ–π–º—Å–ø–µ–π—Å—ã) –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ XMI")
            assert False, "–ü–∞–∫–µ—Ç—ã (–Ω–µ–π–º—Å–ø–µ–π—Å—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ XMI"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–π–º—Å–ø–µ–π—Å–∞ std
        if 'name="std"' in xmi_content:
            print("‚úÖ –ù–µ–π–º—Å–ø–µ–π—Å 'std' –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ù–µ–π–º—Å–ø–µ–π—Å 'std' –ù–ï –Ω–∞–π–¥–µ–Ω")
            assert False, "–ù–µ–π–º—Å–ø–µ–π—Å 'std' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–π–º—Å–ø–µ–π—Å–∞ mynamespace
        if 'name="mynamespace"' in xmi_content:
            print("‚úÖ –ù–µ–π–º—Å–ø–µ–π—Å 'mynamespace' –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ù–µ–π–º—Å–ø–µ–π—Å 'mynamespace' –ù–ï –Ω–∞–π–¥–µ–Ω")
            assert False, "–ù–µ–π–º—Å–ø–µ–π—Å 'mynamespace' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ std::vector –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–∫–µ—Ç–µ std
        # –ò—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: <packagedElement xmi:type="uml:Package" name="std">...<packagedElement xmi:type="uml:DataType" name="vector<int>">
        if 'name="std"' in xmi_content and 'name="vector&lt;int&gt;"' in xmi_content:
            print("‚úÖ –ó–∞–≥–ª—É—à–∫–∞ std::vector<int> –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–µ–π–º—Å–ø–µ–π—Å–µ std")
        else:
            print("‚ùå –ó–∞–≥–ª—É—à–∫–∞ std::vector<int> –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–µ–π–º—Å–ø–µ–π—Å–µ std")
            assert False, "–ó–∞–≥–ª—É—à–∫–∞ std::vector<int> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–µ–π–º—Å–ø–µ–π—Å–µ std"
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ó–∞–≥–ª—É—à–∫–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–ø–∞–¥–∞—é—Ç –≤ –Ω–µ–π–º—Å–ø–µ–π—Å—ã.")
        assert True
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(tmp_path):
            os.unlink(tmp_path)

if __name__ == "__main__":
    success = test_stubs_in_namespaces()
    exit(0 if success else 1)
